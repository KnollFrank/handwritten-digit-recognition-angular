!function(modules){var installedModules={};function __webpack_require__(moduleId){if(installedModules[moduleId])return installedModules[moduleId].exports;var module=installedModules[moduleId]={i:moduleId,l:!1,exports:{}};return modules[moduleId].call(module.exports,module,module.exports,__webpack_require__),module.l=!0,module.exports}__webpack_require__.m=modules,__webpack_require__.c=installedModules,__webpack_require__.d=function(exports,name,getter){__webpack_require__.o(exports,name)||Object.defineProperty(exports,name,{enumerable:!0,get:getter})},__webpack_require__.r=function(exports){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(exports,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(exports,"__esModule",{value:!0})},__webpack_require__.t=function(value,mode){if(1&mode&&(value=__webpack_require__(value)),8&mode)return value;if(4&mode&&"object"==typeof value&&value&&value.__esModule)return value;var ns=Object.create(null);if(__webpack_require__.r(ns),Object.defineProperty(ns,"default",{enumerable:!0,value:value}),2&mode&&"string"!=typeof value)for(var key in value)__webpack_require__.d(ns,key,(function(key){return value[key]}).bind(null,key));return ns},__webpack_require__.n=function(module){var getter=module&&module.__esModule?function(){return module.default}:function(){return module};return __webpack_require__.d(getter,"a",getter),getter},__webpack_require__.o=function(object,property){return Object.prototype.hasOwnProperty.call(object,property)},__webpack_require__.p="",__webpack_require__(__webpack_require__.s="dnpa")}({dnpa:function(module,__webpack_exports__,__webpack_require__){"use strict";function zip(array1,array2){return array1.map((value,index)=>[value,array2[index]])}__webpack_require__.r(__webpack_exports__);class KNN{constructor(k){this.k=k}fit(X,y){this.X=X,this.y=y}predict(x){return function(array){if(0==array.length)return null;let modeMap={},maxEl=array[0],maxCount=1;for(let i=0;i<array.length;i++){let el=array[i];null==modeMap[el]?modeMap[el]=1:modeMap[el]++,modeMap[el]>maxCount&&(maxEl=el,maxCount=modeMap[el])}return maxEl}(this.getKNearestNeighbors(x).map(({y:y})=>y))}getKNearestNeighbors(x){const distancesX2x=[];for(let i=0;i<this.X.length;i++)distancesX2x.push({index:i,distance:(pointA=this.X[i],pointB=x,numbers=zip(pointA,pointB).map(([coordA,coordB])=>Math.pow(coordA-coordB,2)),numbers.reduce((sum,el)=>sum+Number(el),0))});var numbers,pointA,pointB;return distancesX2x.sort(({distance:distance1},{distance:distance2})=>distance1-distance2),distancesX2x.slice(0,this.k).map(({index:index,distance:distance})=>({x:this.X[index],y:this.y[index],distance:Math.sqrt(distance)}))}}const knnWorker=new class{onmessage({type:type,params:params}){switch(type){case"fit":{const{X:X,y:y,k:k}=params;this.knn=new KNN(k),this.knn.fit(X,y);break}case"getKNearestNeighbors":{const X=params.X,kNearestNeighborss=X.map((x,index)=>(this.postMessage({type:"progress",value:{actualIndexZeroBased:index,endIndexZeroBasedExclusive:X.length}}),this.knn.getKNearestNeighbors(x)));this.postMessage({type:"result",value:kNearestNeighborss});break}}}};addEventListener("message",({data:data})=>{knnWorker.postMessage=data=>postMessage(data),knnWorker.onmessage(data)})}});